#version 330 
attribute vec3 coord3d; 
attribute vec3 v_normal;
attribute mat4 test;
varying vec3 f_color;
uniform mat4 rotate_cam;
uniform mat4 mvp;
uniform mat3 rotate;
uniform mat4 model;

struct lightSource{
  vec4 position;
  vec4 diffuse;
  vec4 specular;
  float K1, K2, K3;
  float spotCutoff, spotExponent;
  vec3 spotDirection;
};

lightSource light0 = lightSource(
    vec4(1.0, 1.0, 0.0, 1.0),
    vec4(1.0, 0.5, 1.0, 1.0),
	vec4(1.0,  1.0,  1.0, 1.0),
	0.0, 0.1, 0.1,
	30.0, 20.0,
	vec3(-1.0, -0.5, -1.0)
);
 
struct material{
  vec4 diffuse;
  vec4 specular;
  float shininess;
};

material mymaterial = material(
	vec4(1.0, 0.8, 0.8, 1.0),
	vec4(1.0, 1.0, 1.0, 1.0),
	5.0
);
vec3 ambient = vec3(0.1, 0.1, 0.1);

void main(void){
  vec3 normalDirection = normalize(v_normal * rotate);
  vec3 vertexToLight = vec3(light0.position - model * vec4(coord3d, 1.0));
  vec3 lightDirection = normalize(vertexToLight);
  
  float distance = length(vertexToLight);
  float a = 1.0 / (light0.K1 + light0.K2 * distance + light0.K3 * distance * distance);
  
  float clampedCosine = max(0.0, dot(-lightDirection, normalize(light0.spotDirection)));
  if (clampedCosine < cos(light0.spotCutoff * 3.14159 / 180.0)) {
	a = 0.0;
  } else {
    a = a * pow(clampedCosine, light0.spotExponent);
  }

  vec3 diffuseReflection = vec3(mymaterial.diffuse) * min(a, 1.0) * vec3(light0.diffuse) * max(0.0, dot(normalDirection, lightDirection));

  vec3 viewDirection = vec3(vec4(0, 0, 1, 0) * rotate_cam);
  vec3 specularReflection = vec3(0.0, 0.0, 0.0);
  if (dot(normalDirection, lightDirection) >= 0.0)  {
      specularReflection = a * vec3(light0.specular) * vec3(mymaterial.specular)
			* pow(max(0.0, dot(reflect(-lightDirection, normalDirection), viewDirection)), mymaterial.shininess);
  }
 
  f_color = ambient * vec3(mymaterial.diffuse) + diffuseReflection + specularReflection;
  gl_Position = mvp * vec4(coord3d, 1.0);
}