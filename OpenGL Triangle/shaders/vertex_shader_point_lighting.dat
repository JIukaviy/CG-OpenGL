#version 330 
attribute vec3 coord3d; 
attribute vec3 v_normal;
varying vec3 f_color;
uniform mat4 mvp;
uniform mat3 rotate;
uniform mat4 model;

struct lightSource{
  vec4 position;
  vec4 diffuse;
  float K1, K2, K3;
};

lightSource light0 = lightSource(
    vec4(1.0, 1.0, 0.0, 1.0),
    vec4(1.0, 0.5, 1.0, 1.0),
	0.0, 0.2, 0.2
);
 
struct material{
  vec4 diffuse;
};

material mymaterial = material(vec4(1.0, 0.8, 0.8, 1.0));
vec3 ambient = vec3(0.1, 0.1, 0.1);

void main(void){
  vec3 normalDirection = normalize(v_normal * rotate);
  vec3 vertexToLight = vec3(light0.position - model * vec4(coord3d, 1.0));
  
  float distance = length(vertexToLight);
  float a = 1.0 / (light0.K1 + light0.K2 * distance + light0.K3 * distance * distance);
  vec3 lightDirection = normalize(vertexToLight);
 
  vec3 diffuseReflection = vec3(mymaterial.diffuse) * (ambient + min(a, 1.0) * vec3(light0.diffuse) * max(0.0, dot(normalDirection, lightDirection)));
 
  f_color = diffuseReflection;
  gl_Position = mvp * vec4(coord3d, 1.0);
}